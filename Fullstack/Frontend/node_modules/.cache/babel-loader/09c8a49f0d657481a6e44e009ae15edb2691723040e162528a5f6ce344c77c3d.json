{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\Desktop\\\\ml-ops_task7\\\\Fullstack\\\\Frontend\\\\src\\\\App.js\";\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, Link } from \"react-router-dom\";\n// import WeatherForm from \"./components/weatherform\";\n// import PredictionResult from \"./components/predictionresult\";\n// import Login from \"./Login\"; // Login component for redirection\n// import Signup from \"./Signup\"; // Signup component for route\n\n// const checkLoggedIn = () => {\n//   return localStorage.getItem(\"user\") !== null; // Replace with actual check\n// };\n\n// function App() {\n//   const [prediction, setPrediction] = useState(null);\n//   const [isLoggedIn, setIsLoggedIn] = useState(checkLoggedIn());\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     if (!isLoggedIn) {\n//       navigate(\"/login\"); // Redirect to login if not logged in\n//     }\n//   }, [isLoggedIn, navigate]);\n\n//   const handlePredict = (predictedTemperature) => {\n//     setPrediction(predictedTemperature);\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <h1>Weather Prediction</h1>\n//       {isLoggedIn ? (\n//         <div>\n//           <WeatherForm onPredict={handlePredict} />\n//           <PredictionResult prediction={prediction} />\n//         </div>\n//       ) : (\n//         <p>You need to log in to use this feature.</p>\n//       )}\n//       {/* Link to the signup page */}\n//       <Link to=\"/signup\">Sign up</Link>\n//     </div>\n//   );\n// }\n\n// export default App;\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, Link } from \"react-router-dom\";\n// import WeatherForm from \"./components/weatherform\";\n// import PredictionResult from \"./components/predictionresult\";\n// import Login from \"./Login\"; // Login component for redirection\n// import Signup from \"./Signup\"; // Signup component for route\n// import axios from \"axios\";\n\n// const checkLoggedIn = () => {\n//   return localStorage.getItem(\"token\") !== null; // Check if the token exists\n// };\n\n// function App() {\n//   const [prediction, setPrediction] = useState(null);\n//   const [isLoggedIn, setIsLoggedIn] = useState(checkLoggedIn());\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     if (!isLoggedIn) {\n//       navigate(\"/login\"); // Redirect to login if not logged in\n//     }\n//   }, [isLoggedIn, navigate]);\n\n//   const handlePredict = async (humidity, wind_speed, precipitation) => {\n//     try {\n//       // Send prediction request to backend\n//       const response = await axios.post(\"http://localhost:5000/predict\", {\n//         humidity,\n//         wind_speed,\n//         precipitation,\n//       });\n//       const predictedTemperature = response.data.predicted_temperature;\n//       setPrediction(predictedTemperature);\n//     } catch (error) {\n//       console.error(\"Error fetching prediction:\", error);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     // Clear the token from localStorage and update the state\n//     localStorage.removeItem(\"token\");\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <h1>Weather Prediction</h1>\n//       {isLoggedIn ? (\n//         <div>\n//           <WeatherForm onPredict={handlePredict} />\n//           <PredictionResult prediction={prediction} />\n//           <button onClick={handleLogout}>Logout</button>\n//         </div>\n//       ) : (\n//         <p>You need to log in to use this feature.</p>\n//       )}\n//       <Link to=\"/signup\">Sign up</Link>\n//     </div>\n//   );\n// }\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport WeatherForm from \"./components/weatherform\"; // Import WeatherForm\nimport Login from \"./Login\"; // Your login component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const isAuthenticated = localStorage.getItem(\"token\"); // Check if token exists\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/weatherform\",\n        element: /*#__PURE__*/_jsxDEV(WeatherForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navigate","WeatherForm","Login","jsxDEV","_jsxDEV","App","isAuthenticated","localStorage","getItem","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["D:/OneDrive/Desktop/ml-ops_task7/Fullstack/Frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate, Link } from \"react-router-dom\";\r\n// import WeatherForm from \"./components/weatherform\";\r\n// import PredictionResult from \"./components/predictionresult\";\r\n// import Login from \"./Login\"; // Login component for redirection\r\n// import Signup from \"./Signup\"; // Signup component for route\r\n\r\n// const checkLoggedIn = () => {\r\n//   return localStorage.getItem(\"user\") !== null; // Replace with actual check\r\n// };\r\n\r\n// function App() {\r\n//   const [prediction, setPrediction] = useState(null);\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(checkLoggedIn());\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     if (!isLoggedIn) {\r\n//       navigate(\"/login\"); // Redirect to login if not logged in\r\n//     }\r\n//   }, [isLoggedIn, navigate]);\r\n\r\n//   const handlePredict = (predictedTemperature) => {\r\n//     setPrediction(predictedTemperature);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <h1>Weather Prediction</h1>\r\n//       {isLoggedIn ? (\r\n//         <div>\r\n//           <WeatherForm onPredict={handlePredict} />\r\n//           <PredictionResult prediction={prediction} />\r\n//         </div>\r\n//       ) : (\r\n//         <p>You need to log in to use this feature.</p>\r\n//       )}\r\n//       {/* Link to the signup page */}\r\n//       <Link to=\"/signup\">Sign up</Link>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate, Link } from \"react-router-dom\";\r\n// import WeatherForm from \"./components/weatherform\";\r\n// import PredictionResult from \"./components/predictionresult\";\r\n// import Login from \"./Login\"; // Login component for redirection\r\n// import Signup from \"./Signup\"; // Signup component for route\r\n// import axios from \"axios\";\r\n\r\n// const checkLoggedIn = () => {\r\n//   return localStorage.getItem(\"token\") !== null; // Check if the token exists\r\n// };\r\n\r\n// function App() {\r\n//   const [prediction, setPrediction] = useState(null);\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(checkLoggedIn());\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     if (!isLoggedIn) {\r\n//       navigate(\"/login\"); // Redirect to login if not logged in\r\n//     }\r\n//   }, [isLoggedIn, navigate]);\r\n\r\n//   const handlePredict = async (humidity, wind_speed, precipitation) => {\r\n//     try {\r\n//       // Send prediction request to backend\r\n//       const response = await axios.post(\"http://localhost:5000/predict\", {\r\n//         humidity,\r\n//         wind_speed,\r\n//         precipitation,\r\n//       });\r\n//       const predictedTemperature = response.data.predicted_temperature;\r\n//       setPrediction(predictedTemperature);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching prediction:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     // Clear the token from localStorage and update the state\r\n//     localStorage.removeItem(\"token\");\r\n//     setIsLoggedIn(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <h1>Weather Prediction</h1>\r\n//       {isLoggedIn ? (\r\n//         <div>\r\n//           <WeatherForm onPredict={handlePredict} />\r\n//           <PredictionResult prediction={prediction} />\r\n//           <button onClick={handleLogout}>Logout</button>\r\n//         </div>\r\n//       ) : (\r\n//         <p>You need to log in to use this feature.</p>\r\n//       )}\r\n//       <Link to=\"/signup\">Sign up</Link>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\r\nimport WeatherForm from \"./components/weatherform\"; // Import WeatherForm\r\nimport Login from \"./Login\"; // Your login component\r\n\r\nconst App = () => {\r\n  const isAuthenticated = localStorage.getItem(\"token\"); // Check if token exists\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        {/* Login route */}\r\n        <Route path=\"/login\" element={<Login />} />\r\n\r\n        {/* Weather Prediction route, only accessible if authenticated */}\r\n        <Route path=\"/weatherform\" element={<WeatherForm />} />\r\n\r\n        {/* Default route - can be to login or another page */}\r\n        <Route path=\"/\" element={<Navigate to=\"/login\" />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAOC,WAAW,MAAM,0BAA0B,CAAC,CAAC;AACpD,OAAOC,KAAK,MAAM,SAAS,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEvD,oBACEJ,OAAA,CAACP,MAAM;IAAAY,QAAA,eACLL,OAAA,CAACN,MAAM;MAAAW,QAAA,gBAELL,OAAA,CAACL,KAAK;QAACW,IAAI,EAAC,QAAQ;QAACC,OAAO,eAAEP,OAAA,CAACF,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAG3CX,OAAA,CAACL,KAAK;QAACW,IAAI,EAAC,cAAc;QAACC,OAAO,eAAEP,OAAA,CAACH,WAAW;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAGvDX,OAAA,CAACL,KAAK;QAACW,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEP,OAAA,CAACJ,QAAQ;UAACgB,EAAE,EAAC;QAAQ;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACE,EAAA,GAjBIZ,GAAG;AAmBT,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}