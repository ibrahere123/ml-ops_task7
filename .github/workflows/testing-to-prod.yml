name: CD Pipeline - Testing to Production

on:
  push:
    branches:
      - prod

jobs:
  deploy-to-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-20.04

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Minikube
      - name: Set up Minikube
        uses: manusa/actions-setup-minikube@v2.5.0
        with:
          minikube version: 'v1.30.1'
          kubernetes version: 'v1.26.3'
          driver: docker

      # Step 3: Start Minikube
      - name: Start Minikube
        run: |
          minikube start --wait=true
          minikube status

      # Step 4: Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.3'

      # Step 5: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Pull Docker Images
      - name: Pull Docker Images from DockerHub
        run: |
          docker pull iboe0512/weather-app-backend-flask:latest
          docker pull iboe0512/weather-app-backend-express:latest
          docker pull iboe0512/weather-app-frontend:latest

      # Step 7: Apply Kubernetes Manifests for Flask Backend
      - name: Deploy Flask Backend
        run: |
          kubectl apply -f k8s/flask-backend-deployment.yaml
          kubectl apply -f k8s/flask-backend-service.yaml

      # Step 8: Apply Kubernetes Manifests for Express Backend
      - name: Deploy Express Backend
        run: |
          kubectl apply -f k8s/express-backend-deployment.yaml
          kubectl apply -f k8s/express-backend-service.yaml

      # Step 9: Apply Kubernetes Manifests for Frontend
      - name: Deploy Frontend
        run: |
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/frontend-service.yaml

      # Step 10: Port Forward the Frontend Service for internal access
      - name: Port Forward Frontend Service
        run: |
          kubectl port-forward svc/frontend-service 8080:80 &

      # Step 11: Optionally expose Minikube service using ngrok
      - name: Install ngrok
        run: |
          curl -s https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -o ngrok.zip

      - name: Expose Minikube Service with ngrok
        run: |
          ngrok http 80801 --bind-tls=true &
          sleep 10
          ngrok_url=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "Access your service at: $ngrok_url"

      # Step 12: Verify Kubernetes Resources
      - name: Verify Kubernetes Pods and Services
        run: |
          kubectl get pods
          kubectl get services
